import torch
import torch.nn as nn

intervals = [0.001, 0.0014005413055419923, 0.0018010826110839843, 0.0026021652221679685, 0.0034032478332519525, 0.004204330444335937, 0.005806495666503906, 0.007408660888671875, 0.01381732177734375, 0.0266346435546875, 0.052269287109375, 0.10353857421875, 0.2060771484375, 0.411154296875, 0.82130859375, 1.6416171875, 3.2822343750000003, 6.56346875, 13.125937500000001, 26.250875, 52.500750000000004, 105.0005, 210.0]
coefficients = [[54.616252823946276, -30684.74977243873, 7699661.504482225, -8387954.3059775485], [47.129119594186726, -19793.247193168663, 3740037.3082790477, -8387954.3059775485], [40.471596324815266, -12503.860901181515, 1745134.112954975, -8387954.3059775485], [34.63331075905814, -7916.81092019908, 844567.1717912147, -8387954.3059775485], [30.96417842155123, -5731.992001846099, 519380.0922824842, -8387954.3059775485], [27.743727022126173, -4218.355974799806, 341551.14456992503, -8387954.3059775485], [25.557887348668114, -3444.343921655494, 273082.1804837674, -8387954.3059775485], [21.847074791367323, -2145.8871044189195, 123920.01113644408, -2785479.905027795], [15.873914451894095, -821.7528798225698, 24954.882296131032, -294395.0183416381], [11.385476320689753, -302.91830418177574, 4721.860674130807, -28561.334360338744], [8.109663154384894, -109.41023622392939, 864.2452263720066, -2647.511105737665], [5.755602478759598, -39.10272232116306, 155.4882849017726, -239.70568563467054], [4.077390441910835, -13.900266385382036, 27.730806430023726, -21.44494705005701], [2.8858371833214127, -4.927904165986376, 4.923942415562337, -1.9070105209735735], [2.0415471145834316, -1.7446576412035644, 0.8723727621397772, -0.16906997203210009], [1.4439288008958546, -0.6172511762843076, 0.15438656973855155, -0.0149665307574587], [1.0211310592462588, -0.21830583317968816, 0.027307115108076187, -0.0013238723010603813], [0.7220908564977657, -0.07719595861938679, 0.004828603000023342, -0.00011705935006666288], [0.5106102492062516, -0.027295225310936994, 0.0008537030837605529, -1.0348648348712628e-05], [0.3610612408867921, -0.009650731815768506, 0.00015092529455980094, -9.14786821864228e-07], [0.25531071554685825, -0.003412121854885016, 2.668100159895778e-05, -8.086033619728399e-08], [0.18053259719920098, -0.00120638013824151, 4.716661210367715e-06, -7.147281245096e-09]]

def approx_layernorm(x: torch.Tensor) -> torch.Tensor:
    out = torch.empty_like(x)

    def poly_eval(z: torch.Tensor, coeffs):
        # Evaluate the polynomial sum of coeffs[k] * z^k
        result = torch.zeros_like(z)
        for power, c in enumerate(coeffs):
            result += c * (z ** power)
        return result

    num_intervals = len(intervals)
    for i in range(num_intervals - 1):
        lower = intervals[i]
        upper = intervals[i + 1]
        mask = (x >= lower) & (x < upper)
        out[mask] = poly_eval(x[mask], coefficients[i])

    # Values >= the last boundary
    mask_last = (x >= intervals[-1])
    out[mask_last] = poly_eval(x[mask_last], coefficients[-1])

    # Values < the first boundary
    mask_first = (x < intervals[0])
    out[mask_first] = poly_eval(x[mask_first], coefficients[0])

    return out
